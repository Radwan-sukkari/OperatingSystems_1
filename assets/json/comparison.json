{
  "chapters": [
    {
      "id": 1,
      "title_en": "Chapter 1",
      "title_ar": "الفصل الأول",
      "Comparisons": [
        {
          "comparisonsHeight": 54.4,
          "firstColumnWidth": 75.4,
          "contentWidth": 75,
          "notes": "",
          "tableTitle": "المعماريات",
          "firstColumn": [
            "Monolithic \narchitecture",
            "Layered\narchitecture",
            "Microkernel\narchitecture"
          ],
          "mainColumnHeadings": [
            "الوصف",
            "الرسم"
          ],
          "rows": [
            [
              "كل مكونات نظام التشغيل موجودة \nفي الـ(kernel )بحيث يستطيع أيُ مكون التواصل  \nمع مكون أخر بشكل مباشر.\n- أداء سريع، ولكن يصعب تحديد \nمكان الخطأ إن وقع.",
              "assets/images/2.jpg"
            ],
            [
              "- يتم تقسيم الوظائف المتشابهة ضمن طبقة\n واحدة، تتواصل الطبقة مع \nالطبقة الأعلى أو الأدنى منها مباشرة \nفقط، وممكن أن تمرProcess)\n )ما خلال عدة طبقات قبل أن تكتمل.\n- أداء أبطأ، إنتاجية أقل من السابقة.",
              "assets/images/3.jpg"
            ],
            [
              "- الخدمات قليلة، بحيث تحافظ على \nِصغَر ال(Kernel)، وقابلية التوسعة \nَ رفع أو خفض أداء النظام \nبما بتناسب مع التطبيق، وبالتالي \nقابلية التعديل عليها عالية، ولكن \nخفَّضت من الكفاءة",
              "assets/images/1.jpg"
            ]
          ]
        }
      ]
    },
    {
      "id": 4,
      "title_en": "Chapter 4",
      "title_ar": "الفصل الرابع",
      "Comparisons": [
        {
          "comparisonsHeight": 54.4,
          "firstColumnWidth": 75.4,
          "contentWidth": 75,
          "notes": "",
          "tableTitle": "النموذج",
          "firstColumn": [
            "user_level \nthreads",
            "kernal_level\nthreads",
            "comination\nuser_level\nand Kernel_\nlevel threads"
          ],
          "mainColumnHeadings": [
            "شرح",
            "ايجابيات",
            "سلبيات",
            "الرسم"
          ],
          "rows": [
            [
              "تنفذ عملياتها ضمن (user space) ولاتستطبع تنفيذ تعليمات ذات صلاحية معينة او الوصول الى موارد (kernal) بشكل مباشر ويقوم نظام التشغيل بتعيين كل ال (threads) ضمن (process) متعددة ",
              "1_اكثر محمولية\n 2-التزامن خارج ال (kernal) \n 3_مكتبات ال user level تستطيع جدولة threads الخاصة بها لتحسين الاداء ",
              "1_ترى ال kernal العملية المتعددة threads على انها threads وحيد ولايمكن جدولة العملية على اكثر من معالج ",
              "assets/images/4.jpg"
            ],
            [
              " 1_ تقوم بتعيين كل threads الى سياق تنفيذ خاص به  \n 2_ ليست دائما الحل الأفضل من أجل تطبيق متعدد ال (threads)",
              "1_ تزيد من ال (scalability)  \n 2_ التفاعل (interactivity)  \n 3 _الانتاجية (productivity)",
              "1_تزيد العبء (overhead) \n 2 _ تقلل المحمولية  (protability)",
              "assets/images/5.jpg"
            ],
            [
              "عدد ال (user level thread) وال (kernal level thread) ليس بالضرورة ان يكون متساوي ",
              " يخفف من العبء (overhead) مقارنة مع (one to one mapping) وذلك بتوظيف فكرة تجميع ال (threads) ",
              "",
              "assets/images/6.jpg"
            ]
          ]
        }
      ]
    },
    {
      "id": 5,
      "title_en": "Chapter 5",
      "title_ar": "الفصل الخامس",
      "Comparisons": [
        {
          "comparisonsHeight": 54.4,
          "firstColumnWidth": 75.4,
          "contentWidth": 75,
          "notes": "",
          "tableTitle": "النموذج",
          "firstColumn": [
            "Dekkers \nAlgorithm v1",
            "Dekkers\nAlgorithm v2",
            "Dekkers\nAlgorithm v3",
            "Dekkers\nAlgorithm v4",
            "Dekkers\nAlgorithm v5",
            "peterson\nAlgorithm"
          ],
          "mainColumnHeadings": [
            "ايجابيات",
            "سلبيات"
          ],
          "rows": [
            [
              "_نجح هذا الاصدار في فرض الاستبعاد المتادل\n_استخدم متحولات من أجل التحكم أي (thread) سوف ينفذ\n _ اعتمد على الفحصص المتكرر لمعرفة فيما اذا كانت المنطقة الحرجة متاحة أم لا عن طريق (busy waiting) ",
              "_ تسببت تفنية (busy waiting) باضاعة وقت مهم من وقت المعالج \n _ ظهرت مشكلة (lock step \nsynchronization) اي تزامن قفل الخطوة وهو قفل مرحلي اذا دخل احد (thread) لايدخل الثاني"
            ],
            [
              "_ ازالت مشكلة lock step\n  syncchronization \n  _ فكت الارتباط :أصبح لكل thread متحول خاص به",
              " _ انتهكت الاستبعاد المتبادل \n _ يمكن ان يتقاطع ال thread اثناء تعديله لل flag \n _ اسوأ من الاول بفرض دخول كلا ال threads الى المنطقة الحرجة اي هناك تداخل"
            ],
            [
              "_ حلت مشكلة الاستبعاد المتبادل ( لايمكن ل 2 thread الدخول ) \n _ يهيى علم المنطقة الحرجة قبل فحص الدخول لها ",
              "_ احتمال لحدوث القفل الميت  dead lock \n _ لن يستطيع اي من ال thread كسر الحلقة \n _ ليست حلا لمشكلة الاستبعاد المتبادل"
            ],
            [
              "_ حلت المشاكل السابقة لاصدارات ديكر ( القفل الميت والاستبعاد المتبادل و busy waiting )",
              "_ ولدت مشكلة الانتظار غير المسمى ( وهذا غير مقبول في انظمة العمل الحرجة)"
            ],
            [
              "- تسمى خوارزمية ديكر للاستبعاد المتبادل \n _ الحل المناسب الذي يضمن الاستبعاد المتبادل\n _ تستخدم مفهوم ال thread المفضل للدخول للمنطقة الحرجة \n _ حلت مشكة من سينفذ اولا \n _ يتجنب المشاكل السابقة القفل الميت والانتظار الغير مسمى",
              ""
            ],
            [
              "_ اقل تعقيدا من خوارزمية ديكر \n _ تعتمد على ال favoured thread & busy waiting \n _ خطواتها أقل في تنفيذ الاستبعاد المتبادل \n _ تتجنب مشاكل ( Postponement & deadlock)",
              ""
            ]
          ]
        }
      ]
    },
    {
      "id": 8,
      "title_en": "Chapter 9",
      "title_ar": "الفصل التاسع",
      "Comparisons": [
        {
          "comparisonsHeight": 54.4,
          "firstColumnWidth": 75.4,
          "contentWidth": 75,
          "notes": "",
          "tableTitle": "وجه المقارنة ",
          "firstColumn": [
            "طريقة العمل",
            "العيوب",

            "الأنواع",
            "كيفية التقلب على العيوب",
            "الحماية",
            "الرسم"
          ],
          "mainColumnHeadings": [
            "Fixed-Partition",
            "Variable-Partition"
          ],
          "rows": [
            [
              "أكثر من برنامج يعمل في نفس الوقت، يكون هناك تحديد شستق لعنوان الذاكرة  الذي يجب أن يُوضع فيه البرنامج.",
              " يتم وضع المهام في المكان الذي تتسع به،أي ليس هناك تحديد شستق للعناوين."
            ],
            [
              " _في النوع الأول ، اذا كان القسم المطلوب ممتلىء لا يمكن تحميل البرنامج ،\n _ تجزئة داخلية ( internal fragmentation ) ناتجة عن وضع البرامج وترك فجوات صغيرة في ال ( partitions) لاتكفي لبرامج اخرى",
              " _ تجزئة خارجية ( external fragmentation) ناتجة عن ازالة العملية لانها تترك فجوات صغيرة جدا للعمليات الجديدة القادمة"
            ],
            [
              " _ Absolute Addresses \n _ Relocatable Addresses",
              "لاتوجد انواع"
            ],
            [
              " (relocatable compiler)   كما في الطريقة الثانية من ال (fixed _parition)",
              "_ الدمج coalescing \n _ الضغط ويدعى (garbage collection) "
            ],
            [
              "مسجلات حدودية لبداية ونهاية البرنامج",
              "مسجلات حدودية لبداية ونهاية البرنامج"
            ],
            [
              "assets/images/7.jpg",
              "assets/images/8.jpg"
            ]
          ]
        },
        {
          "comparisonsHeight": 54.4,
          "firstColumnWidth": 75.4,
          "contentWidth": 75,
          "notes": "",
          "tableTitle": "وجه المقارنة ",
          "firstColumn": [
            "الحالة",
            " سبب الحدوث ",
            "الحل ",
            "الرسم"
          ],
          "mainColumnHeadings": [
            "internal-fragmentation",
            "external-fragmentation"
          ],
          "rows": [
            [
              "fixed-\npartition_\nmultiprogramming",
              "variable_\npartition_\nmultiprogramming"
            ],
            [
              "ناتجة عن وضع البرامج وترك فجوات صغيرة في ال partition لاتكفي لبرامج اخرى",
              "ناتجة عن ازالة العملية لانها تترك فجوات صغيرة جدا للعمليات الجديدة القادمة"
            ],
            [
              "_",
              "باستخدام الضغط والدمج"
            ],
            [
              "assets/images/9.jpg",
              "assets/images/10.jpg"
            ]
          ]
        },
        {
          "comparisonsHeight": 54.4,
          "firstColumnWidth": 75.4,
          "contentWidth": 75,
          "notes": "",
          "tableTitle": "وجه المقارنة ",
          "firstColumn": [
            "طريقة العمل",
            " العيوب ",
            "الرسم"
          ],
          "mainColumnHeadings": [
            "Absolute-addresses",
            "Relocatable-addresses"
          ],
          "rows": [
            [
              "يخصص لكل عملية نشطة مكان ثابت في الذاكرة ، أي أن البرنامج يحمل في مكان محدد وليس بغيره.",
              "تتم إعادة توضع ال jobs فيتم وضعها في أي مكان مناسب بحجمها تقريبا"
            ],
            [
              "اذا كان القسم المطلوب من الذاكرة الخاص ببرنامج معين ممتلىء عندها لن تنفذ العملية ، مع احتمال وجود اقسام فارغة من الذاكرة إضاعة ذاكرية",
              ""
            ],
            [
              "assets/images/11.jpg",
              "assets/images/12.jpg"
            ]
          ]
        },
        {
          "comparisonsHeight": 54.4,
          "firstColumnWidth": 75.4,
          "contentWidth": 75,
          "notes": "",
          "tableTitle": "وجه المقارنة ",
          "firstColumn": [
            "طريقة العمل",
            " التكلفة ",
            "الرسم"
          ],
          "mainColumnHeadings": [
            "الدمج(coalescing)",
            "الضغط(compacting)"
          ],
          "rows": [
            [
              "يتم دمج كتلتين فارغتين متجاورتين في الذاكرة إلى كتلة أكبر ، لايكفي عادةً لإعادة قسم كبير من الذاكرة",
              "تعيد تنظيم الذاكرة لتصنع كتلة واحدة متجاورة من المساحة فارغة وكتلة واحدة من المساحة مشغولة"
            ],
            [
              "تكلفة أقل",
              "تكلفة عالية وعبء كبير على المعالج"
            ],
            [
              "assets/images/13.jpg",
              "assets/images/14.jpg"
            ]
          ]
        },
        {
          "comparisonsHeight": 54.4,
          "firstColumnWidth": 75.4,
          "contentWidth": 75,
          "notes": "",
          "tableTitle": "وجه المقارنة ",

          "firstColumn": [
            "first_fit",
            "best_fit ",
            "worst_fit",
            "next_fit"
          ],
          "mainColumnHeadings": [
            "طريقة العمل",
            "الرسم"
          ],
          "rows": [
            [
              "توضع العملية عند إيجاد أول فجوة ذات حجم كافي ، وهي استراتيجة بسيطة وغير مكلفة",
              "assets/images/18.jpg"
            ],
            [
              " توضع العملية في الفجوة التي تترك فيها أقل مساحة غير مستخدمة وهي تتطلب تكلفة ملحوظة للعمل بها",
              "assets/images/19.jpg"
            ],
            [
              "توضع العملية في الفجوة التي تترك فيها أكبر مساحة غير مستخدمة ، مما يخلق فجوة كبيرة أخرى لتتسع بجانبها عملية أخرى",
              "assets/images/15.jpg"
            ],
            [
              "لاتبحث في بداية free memory list عن فجوات لوضع العملية فيها ، وانما يبدأ البحث عن الفجوات من بعد الفجوات التي أخذتها العملية السابقة ، بإعتبار أنهما من طبيعة مقارنة",
              ""
            ]
          ]
        },
        {
          "comparisonsHeight": 54.4,
          "firstColumnWidth": 75.4,
          "contentWidth": 75,
          "notes": "",
          "tableTitle": "وجه المقارنة ",
          "firstColumn": [
            "الشرح",
            "الرسم"
          ],
          "mainColumnHeadings": [
            "Overlays",
            "Multiprogramming with memory swapping"
          ],
          "rows": [
            [
              "تقنية برمجية للتغلب على حدود التخصيص المتجاورة ، حيث يتم تقسيم البرنامج إلى وحدات منطقية ، وتتوضع المقاطع النشطة منه فقط في الذاكرة ، يكون من الصعب تنظيم التراكمات بحيث يبقى استخدام الذاكرة فعالا ، وتصعب عملية التعديل على البرامج",
              "هنا يتم الدمج بين البئيتين السابقتين ( single user و multi programming) لاتترك العمليات غير النشطة في الذاكرة الرئيسية ،فيطرأ عليها عملية تبديل swapping  كالتالي\n 1_ يتم تفسيم البرنامج عند احضاره \n -2 يتم وضع القسم النشطة ( active partition) من البرنامج في الذاكرة\n 3_ يتم التبديل swapping \n * عندما تتم مقاطعة العملية من قبل طلب دخل او خرج\n * ينتهي وقتها المخصص ضمن المعالج \n * تتنازل عن المعالج بشكل طوعي \n 4 - يقوم النظام بتبديل موقع العملية بنسختها الثانوية إلى الذاكرة الثانوية مؤقتا\n 5_ ينقل النظام عملية من الذاكرة الثانوية الى نفس القسم من الذاكرة الرئيسية الذي كانت تستخدمه العملية السابقة ( والتي تنتنمي إلى نفس البرنامج وهكذا)"
            ],
            [
              "assets/images/16.jpg",
              "assets/images/17.jpg"
            ]
          ]
        }
      ]
    }
  ]
}